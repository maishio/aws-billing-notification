name: Terragrunt check and plan

on:
  workflow_dispatch:
  pull_request:
    types: [opened, reopened, synchronize]
    branches: [main, develop]

jobs:
  check-and-plan:
    runs-on: ubuntu-latest
    env:
      LOG_LEVEL: ERROR
    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-region: us-east-1

      - name: Setup Terraform
        id: setup-terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          terraform_version: 1.4.4

      - name: Install Terragrunt
        run: |
          TERRAGRUNT_VERSION=$(curl -s https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | jq -r .tag_name)
          curl -sL -o terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/${TERRAGRUNT_VERSION}/terragrunt_linux_amd64"
          sudo install -o root -g root -m 0755 terragrunt /usr/local/bin/

      - name: Generate terraform.tfvars
        run: echo "slack_webhook_url = \"${{ secrets.SLACK_WEBHOOK_URL }}\"" > terraform.tfvars
        working-directory: ./terraform/environments/prod/lambda

      - name: Modify env.hcl
        run: |
          ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
          sed -i "s/123456789012/${ACCOUNT}/" env.hcl
          sed -i "s/myEnv/${{ secrets.ENV }}/" env.hcl
          sed -i "s/myService/${{ secrets.SERVICE }}/" env.hcl
        working-directory: ./terraform/environments/prod

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ./terraform

      - name: Terragrunt Init
        id: init
        run: terragrunt run-all init --terragrunt-log-level $LOG_LEVEL --terragrunt-non-interactive
        working-directory: ./terraform/environments/prod

      - name: Terragrunt Validate
        id: validate
        run: terragrunt run-all validate --terragrunt-log-level $LOG_LEVEL
        working-directory: ./terraform/environments/prod

      - name: Terragrunt Plan
        id: plan
        run: terragrunt run-all plan --terragrunt-log-level $LOG_LEVEL
        working-directory: ./terraform/environments/prod
        continue-on-error: true

      - name: Update PR with Terragrun Plan
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Set up the output template
            const output = `
              #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terrgarunt Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terrgarunt Plan üìñ\`${{ steps.plan.outcome }}\`
              #### Terrgarunt Validation ü§ñ\`${{ steps.validate.outcome }}\`

              <details><summary>Show Plan</summary>

              \`\`\`\n
              ${{ process.env.PLAN }}
              \`\`\`

              </details>

              *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
            `;

            // Create a comment on the PR with the output
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
